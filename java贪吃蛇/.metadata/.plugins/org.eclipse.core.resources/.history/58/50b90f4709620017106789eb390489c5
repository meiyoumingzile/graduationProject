package myPackage1;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class AI1 {
	public class Node{
		v2 pos;
		int len;
		Node[] child;
		Node parent;
		Node(int n){
			this.child=new Node[n];
		}
		Node(int x,int y,int len,int n){
			pos=new v2(x,y);
			this.len=len;
			this.child=new Node[n];
		}
		public Node clone(){
			Node node=new Node(this.pos.x,this.pos.y,this.len,this.child.length);
			node.parent=this.parent;
			for(int i=0;i<this.child.length;i++){
				node.child[i]=this.child[i];
			}
			return node;
		}
	}
	
	public class Tree{
		Node head;
		Tree(v2 pos,int n){
			head=new Node(pos.x,pos.y,0,n);
		}
		
	}
	
	
	int fx[]={0,0,1,-1};
	int fy[]={1,-1,0,0};
	Tree loadTree=null;
	boolean[][] isAlreadyArrive=new boolean[Sence.mappSize.x][Sence.mappSize.y];
	public ArrayList<Node> load=new ArrayList<Node>();
	
	public AI1(){
		
	}
	
	public void search(v2 pos){///////此类里的pos的位置都是数组下标
		
		ArrayList<Node> que=new ArrayList<Node>();
		loadTree=new Tree(pos,4); 
		for(int i=0;i<Sence.mappSize.x;i++){
			for(int j=0;j<Sence.mappSize.y;j++){
				this.isAlreadyArrive[i][j]=false;
				
			}
			
		}
		this.load.clear();
		que.clear();
		Node nowNode=loadTree.head;
		//System.out.println(Sence.mapp[nowNode.pos.x-1][nowNode.pos.y]);
		
		do{
			
			//System.out.println(nowNode.pos.x+" "+nowNode.pos.y);
			this.isAlreadyArrive[nowNode.pos.x][nowNode.pos.y]=true;
			MainForms.main.sence.addOb(this.toPos(nowNode.pos));
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
			for(int i=0;i<4;i++){
				int nextX=nowNode.pos.x+fx[i];
				int nextY=nowNode.pos.y+fy[i];
				//System.out.println(Sence.mapp[nextX][nextY]);
				if(Sence.mapp[nextX][nextY]=='F'){
					while(nowNode!=loadTree.head){
						this.load.add(nowNode);
						nowNode=nowNode.parent;
						//System.out.println("盖度");
					}
					//System.out.println(this.load.size());
					return;
				}
				if(Sence.mapp[nextX][nextY]==' '&&this.isAlreadyArrive[nextX][nextY]==false){
					
					nowNode.child[i]=(new Node(nextX,nextY,nowNode.len+1,4)); 
					nowNode.child[i].parent=nowNode;
					que.add(nowNode.child[i]);
					System.out.println(i);
				}
			}
			nowNode=(que.size()==0?null:que.get(0));
			que.remove(0);
			
		}while(nowNode != null);
	}
	
	public v2 forword(){
		
		int x = 0,y = 0;
		if(this.load.size()>0){
			x=this.load.get(this.load.size()-1).pos.x-this.loadTree.head.pos.x;
			y=this.load.get(this.load.size()-1).pos.y-this.loadTree.head.pos.y;
		}else{
			
			for(int i=0;i<4;i++){
				int nextX=this.loadTree.head.pos.x+this.fx[i];
				int nextY=this.loadTree.head.pos.y+this.fy[i];
				if(Sence.mapp[nextX][nextY]=='F'){
					x=this.fx[i];
					y=this.fy[i];
					
				}
			}
			
		}
		//System.out.println(x+" "+y);
		v2 fp=new v2(x,y);
		return fp;
	}
	
	public v2 toSub(v2 otherPos){
		return (new v2(otherPos.x/30,(otherPos.y-20)/30));
	}
	public v2 toPos(v2 otherPos){
		return (new v2(otherPos.x*30,otherPos.y*30+20));
	}
}
