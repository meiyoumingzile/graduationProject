var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var __extends = this && this.__extends || function __extends(t, e) { 
 function r() { 
 this.constructor = t;
}
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
r.prototype = e.prototype, t.prototype = new r();
};
var HomeView = (function (_super) {
    __extends(HomeView, _super);
    function HomeView() {
        var _this = _super.call(this) || this;
        _this.modalAlpha = .4;
        return _this;
    }
    HomeView.prototype.childrenCreated = function () {
        var _this = this;
        _super.prototype.childrenCreated.call(this);
        var tw = egret.Tween.get(this.btn_single, { loop: true });
        tw.to(0, 0).call(function () { this.scaleX = 1; this.scaleY = 1; }).wait(2000);
        var sc = [-0.1, 0.05, -0.03, 0.05, -0.03];
        for (var i = 0; i < 5; i++) {
            tw.to({ scaleX: 1.0 + sc[i], scaleY: 1.0 - sc[i] }, 100 - i * 10)
                .to({ scaleX: 1, scaleY: 1 }, 55);
        }
        this.dg_friends.dataProvider = new eui.ArrayCollection([
            { name: "fuck1", photo: "default_portrait.png" },
            { name: "fuck2", photo: "default_portrait.png" },
            { name: "fuck3", photo: "default_portrait.png" },
            { name: "fuck4", photo: "default_portrait.png" },
            { name: "fuck4", photo: "default_portrait.png" },
            { name: "fuck4", photo: "default_portrait.png" },
            { name: "fuck4", photo: "default_portrait.png" },
            { name: "fuck4", photo: "default_portrait.png" },
            { name: "fuck4", photo: "default_portrait.png" },
            { name: "fuck4", photo: "default_portrait.png" },
        ]);
        var loadingView = app.ui.getPopup(LoadingView);
        loadingView && app.ui.rmPopup(loadingView);
        this.gp_dev_tools.visible = app.storager.get('vconsole') === 'show';
        this.btn_clear.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            app.pp.cleanData();
        }, this);
        this.txt_go.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            var level = parseInt(_this.txt_level.text); //将字符串转化为整数
            if (level < 1 || isNaN(level)) {
                egret.log("Invalid parameter!");
                return;
            }
            app.pp.currentLevel = level;
            app.pp.pushData();
            Game.inst.resetLevel(level);
        }, this);
        this.refreshNotify(); //刷新界面，是否有新皮肤或者新邀请
        //filter()返回满足回调函数中指定条件的数组元素
        var skins_star = app.status.skinItemData.filter(function (v) { return v.price.type === 2; }).map(function (i) { return i.id; });
        var index = 1;
        var time = 800;
        Utils.makeArrayRandom(skins_star);
        this.btn_rare.icon = app.status.skinItemData[skins_star[0] - 1].thumb;
        this.ticker = egret.setInterval(function () {
            if (index === skins_star.length) {
                Utils.makeArrayRandom(skins_star);
                index = 0;
            }
            _this.btn_rare.icon = app.status.skinItemData[skins_star[index] - 1].thumb;
            index++;
        }, this, time);
        this.txt_star_amount.text = app.pp.starCount + "";
        // this.img_game.mask = this.img_game_mask;
        // this.img_game.source = "bump.jpg";
        this.img_logo.scale = Constant.FullWidthScale;
        this.gp_btns.layout.gap = (this.stage.stageWidth - this.btn_rank.width * this.gp_btns.numChildren) / this.gp_btns.numChildren;
        this.btn_single.addEventListener("touchTap", function () {
            app.platform.logEvent(Log.EventType.HomeClick, { type: app.status.playerType, source: "btnPlay" });
            _this.close();
            app.ui.addPopup(new MatchView);
        }, this);
        this.btn_friendly.addEventListener("touchTap", function () {
            app.platform.logEvent(Log.EventType.HomeClick, { type: app.status.playerType, source: "btnPlay" });
            Common.invite().then(function () {
                _this.close();
                app.ui.addPopup(new MatchView);
            });
        }, this);
        // this.gp_game.addEventListener("touchTap", () => {
        // 	app.platform.logEvent(Log.EventType.ChangeGame, { type: app.status.playerType, result: 0 });
        // 	app.platform.logEvent(Log.EventType.HomeClick, { type: app.status.playerType, source: "btnOtherGame" });
        // 	let bo = app.platform.switchGame("274629043216304");
        // 	if (bo) {
        // 		app.platform.logEvent(Log.EventType.ChangeGame, { type: app.status.playerType, result: 1 });
        // 	} else {
        // 		app.platform.logEvent(Log.EventType.ChangeGame, { type: app.status.playerType, result: 2 });
        // 	}
        // }, this);
        this.btn_rank.addEventListener("touchTap", function () {
            _this.close();
            app.ui.addPopup(new RankView);
            app.platform.logEvent(Log.EventType.HomeClick, { type: app.status.playerType, source: "btnRank" });
        }, this);
        this.btn_skin.addEventListener("touchTap", function () {
            _this.close();
            app.ui.addPopup(new SkinView);
            app.platform.logEvent(Log.EventType.HomeClick, { type: app.status.playerType, source: "btnSkin" });
        }, this);
        this.btn_rare.addEventListener("touchTap", function () {
            _this.close();
            app.ui.addPopup(new InviteView);
            app.platform.logEvent(Log.EventType.HomeClick, { type: app.status.playerType, source: "btnInviteSkin" });
        }, this);
        this.btn_audio.addEventListener("touchTap", function () {
            AudioPlayer.setMute(!AudioPlayer.isMute());
            _this.updateAudioBtn();
        }, this);
        this.updateAudioBtn();
        //判断是否移动端环境,移动声音按钮位置
        if (!egret.Capabilities.isMobile) {
            this.btn_audio.top = 40;
        }
        Game.inst.complete && Game.inst.resetLevel(app.pp.currentLevel);
        // Context.isFB && RES.getResByUrl(FBInstant.player.getPhoto()) //缓存头像
        /** vConsole */
        this.vconsole_switcher.touchEnabled = true;
        var tapped = 0;
        this.vconsole_switcher.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
            if (++tapped > 9) {
                tapped = 0;
                if (app.storager.get('vconsole') !== 'show') {
                    app.storager.set('vconsole', 'show');
                    window['vconsole'].showSwitch();
                    Utils.recoverLog();
                    _this.gp_dev_tools.visible = true;
                }
                else {
                    app.storager.rm('vconsole');
                    window['vconsole'].hideSwitch();
                    Utils.removeLog();
                    _this.gp_dev_tools.visible = false;
                }
            }
        }, this);
    };
    HomeView.prototype.updateAudioBtn = function () {
        this.btn_audio.getChildAt(0).source = AudioPlayer.isMute() ? "home-btn-audio-off.png" : "home-btn-audio-on.png";
    };
    HomeView.prototype.listResponse = function () {
        return [AppConstant.Notify.refresh_invite_count];
    };
    HomeView.prototype.doResponse = function (name, data) {
        if (name === AppConstant.Notify.refresh_invite_count) {
            this.refreshNotify();
        }
    };
    HomeView.prototype.refreshNotify = function () {
        if (app.pp.newStarSkinAmount) {
            this.gp_notify_skin.visible = true;
            this.txt_notify_skin.text = app.pp.newStarSkinAmount + "";
        }
        if (app.pp.checkNewInviteSkin()) {
            this.gp_notify_invite.visible = true;
            this.txt_notify_invite.text = app.pp.newInviteSkinAmount + "";
        }
    };
    HomeView.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
        egret.Tween.removeAllTweens();
        egret.clearInterval(this.ticker);
    };
    return HomeView;
}(BasePopup));
__reflect(HomeView.prototype, "HomeView");
//# sourceMappingURL=HomeView.js.map